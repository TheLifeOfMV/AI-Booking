project:
  name: "ai‑doctor‑booking"
  description: "Multi‑channel platform for patients to book medical appointments via app, WhatsApp or phone."

principles:
  pragmatism:
    summary: >
      Uses production‑proven, well‑documented tools with huge talent pools—minimising ramp‑up time,
      enabling rapid iteration, and fitting comfortably in a USD 1 k/mo launch budget.
  separation_of_concerns:
    summary: >
      Responsibilities are split cleanly into UI components vs. client‑side state (front‑end) and
      transport/API vs. business rules/data (back‑end); each layer exposes an explicit, typed contract.

framework_choices:
  backend: "FastAPI + SQL ORM + ASGI event loop"
  frontend: "React (Next.js) + Zustand state store"
  rationale: |
    • FastAPI’s async, OpenAPI‑first nature maps to REST + webhooks and keeps latency low.
    • Python ecosystem excels for NLP—re‑using it for HTTP reduces infra complexity.
    • Next.js offers SEO for the marketing site plus a hybrid mobile PWA without extra code.
    • Zustand is a dead‑simple, boilerplate‑free store that avoids Redux overhead.

architecture:
  backend:
    layers:
      logic: "Domain services (BookingService, SlotService, NLPService), SQL tables, cron tasks."
      interface: "REST+JSON endpoints, OAuth2/JWT auth, webhook emitter."
  frontend:
    layers:
      logic: "Zustand stores, React context guards, SWR data hooks."
      interface: "Tailwind‑styled components, accessible modal & calendar widgets."
  communication:
    pattern: "Pure REST for internal + external callers; outbound webhooks for partners."
    error_strategy: "Idempotent POSTs, 3‑retry exponential back‑off, circuit‑breaker on third‑party calls."

batches:
  - name: "core_essential"
    approx_loc: 900
    objectives: |
      • Deliver the end‑to‑end in‑app booking flow.
      • Provide admin CRUD over users, doctors, bookings.
      • Expose public read endpoints for specialties and slots.
    instructions: |
      ### Interface steps
      1. *Splash & IntroSlides View (/intro)* – 3‑slide carousel (localStorage “seen” flag) with Skip/Next, brand graphics, and CTA to /channel.
      2. *Login & Signup View (/login)* – responsive form (email/phone), client‑side validation, POST to /auth/login, then route guard redirect.
      3. *Channel Selection View (/channel)* – three CTA cards (Phone Call, WhatsApp, In‑App); on click either invoke agent handler or router.push('/booking/specialty').
      4. *Specialty Selection View (/booking/specialty)* – horizontal card carousel populated via GET /specialties; onSelect writes selectedSpecialty to store.
      5. *Date Selection View (/booking/date)* – 14‑day calendar strip component; on date pick fetches doctors for specialty/date.
      6. *Doctor List View (/booking/doctor)* – grid of doctor cards (avatar, rating, experience); selecting one sets selectedDoctor and routes to slots.
      7. *Time‑Slot Picker View (/booking/slot)* – grid of available times from GET /slots; choosing a slot stores draftBooking.
      8. *Booking Confirmation View (/booking/confirm)* – summary card (specialty, doctor, date/time) + Confirm button → POST /bookings.
      9. *Booking Success View (/booking/success)* – thank‑you banner, add‑to‑calendar link, “View My Bookings” button.
      10. *Upcoming Bookings View (/bookings)* – list future/past bookings with status badges and actions (reschedule/cancel).
      11. *Booking Detail View (/bookings/:id)* – detailed record, doctor contact link, cancel/reschedule controls.
      12. *Admin Dashboard View (/admin)* – KPI summary cards (bookings/day, utilisation) and quick links.
      13. *Admin Users View (/admin/users)* – searchable table of patients; row click opens edit modal.
      14. *Admin Doctors View (/admin/doctors)* – table with credential status column, approve toggle, edit modal.
      15. *Admin Bookings View (/admin/bookings)* – global bookings table with filters, bulk cancel/refund, impersonation button.
      16. *Admin Doctor Edit Modal* – multi‑step form (profile, specialties, availability) with optimistic UI save.
      ### Logic steps
      1. Define SQL tables: users, doctors, specialties, slots, bookings, roles.
      2. Implement BookingService.create():
         • validate slot still open   • mark slot reserved   • emit booking.created.
      3. SlotService.list_available(date, specialty) → SQL JOIN + gap‑solver.
      4. Add /api/v1/* endpoints: GET /specialties, GET /slots, POST /bookings.
      5. Secure all endpoints with OAuth Password + JWT; issue tokens on /auth/login.
      6. Seed DB with 3 specialties, 3 doctors, 15 demo slots.

  - name: "core_important"
    approx_loc: 950
    objectives: |
      • Implement WhatsApp + Voice AI agent flow.
      • Add reminders & notification preferences.
      • Publish partner‑facing widget & booking webhooks.
    instructions: |
      ### Interface steps
      1. Build two‑line <script> snippet that injects an <iframe> pointing to /embed.
      2. Create /embed micro‑UI: specialty → date → doctor → time, auto‑posts to parent on success.
      3. Preference panel /settings/notifications with toggles for email/SMS.
      ### Logic steps
      1. Integrate Twilio (WhatsApp + Programmable Voice) via webhooks:
         • On inbound message/call → NLPService.intent(text) → proceed.
      2. NLPService (spaCy + rule templates) → returns {specialty,date,time}.
      3. Agent workflow: suggest earliest 3 slots → on confirmation call BookingService.create().
      4. Reminder job: cron every minute → send T‑24h & T‑1h WhatsApp templates.
      5. Implement POST /webhooks/partner with HMAC signature; document in OpenAPI.

  - name: "non_core_important"
    approx_loc: 750
    objectives: |
      • Multi‑clinic tenancy and assistant role.
      • Real‑time analytics dashboard for admins.
    instructions: |
      ### Interface steps
      1. Extend Admin UI with clinic switcher dropdown (visible to super‑admins).
      2. Add /analytics page: cards for bookings/day, utilisation%, channel split (chart.js).
      ### Logic steps
      1. Add clinics table; doctors reference clinic_id.
      2. Role middleware: ASSISTANT may access doctors where clinic_id matches.
      3. Materialised view or SQL CTE for daily aggregates; expose /stats/summary.
      4. Use Server‑Sent Events to push live updates to /analytics.

  - name: "non_core_optional"
    approx_loc: 600
    objectives: |
      • Video‑visit support with virtual waiting room.
      • Multi‑language (EN/PT) NLP extension.
    instructions: |
      ### Interface steps
      1. Add “Virtual” toggle on doctor cards; show join‑video button at T‑5 min.
      2. Waiting‑room page with doctor avatar & status indicator.
      ### Logic steps
      1. Integrate WebRTC provider SDK; create one‑time room per booking.
      2. Extend NLPService with language‑auto‑detect and extra intent patterns.
      3. Update reminders to include video link when virtual.

implementation_guidance:
  planning: |
    • Lock sprint goals to individual batches; never mix interface & logic stories.
    • Run load‑test after each batch completes before moving on.
  coding: |
    • Write granular unit tests first; aim for ≥ 80 % coverage on services.
    • Enforce typed contracts: pydantic models on the back‑end, TypeScript types on the front‑end.
  debugging: |
    • Single “trace‑id” header propagates through UI → API → logs.
    • Use playwright for end‑to‑end test reproduction; record failing flows automatically.

output_format: "YAML"


new 